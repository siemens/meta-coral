#!/usr/bin/make -f
# ---------------------------------------------------------------------------------------------------------------------
# debian/rules file for pycoral
#
# Copyright (c) 2021, Mentor Graphics, a Siemens business
# Copyright (c) Siemens AG, 2022
#
# This file is subject to the terms and conditions of the MIT License.
# See COPYING.MIT file in the top-level directory.
# ---------------------------------------------------------------------------------------------------------------------

include /usr/share/dpkg/architecture.mk
include /usr/share/dpkg/pkg-info.mk

export DEB_BUILD_MAINT_OPTIONS = hardening=+all

# ---------------------------------------------------------------------------------------------------------------------
# External sources
# ---------------------------------------------------------------------------------------------------------------------

# List repositories to be sync'ed and copied to local/ before creating the source tarball
EXTERNAL_SOURCES = \
	arm_neon_2_x86_sse \
	bazel_skylib \
	bazel_toolchains \
	build_bazel_apple_support \
	build_bazel_rules_android \
	build_bazel_rules_apple \
	build_bazel_rules_swift \
	clog \
	com_google_absl \
	com_google_glog \
	com_google_googleapis \
	coral_crosstool \
	cpuinfo \
	eigen_archive \
	envoy_api \
	farmhash_archive \
	fft2d \
	FP16 \
	FXdiv \
	gemmlowp \
	glog \
	go_sdk \
	io_bazel_rules_closure \
	io_bazel_rules_docker \
	io_bazel_rules_go \
	org_tensorflow \
	pthreadpool \
	rules_cc \
	rules_java \
	tf_toolchains \
	ruy \
	upb

# ---------------------------------------------------------------------------------------------------------------------
# System dependencies
# ---------------------------------------------------------------------------------------------------------------------

# This list should be synced with the system deps of tensorflow
SYSTEM_LIBS = com_github_grpc_grpc \
              com_google_protobuf  \
              curl                 \
              double_conversion    \
              gast_archive         \
              gif                  \
              libjpeg_turbo        \
              nasm                 \
              nsync                \
              snappy               \
              zlib                 \
              png                  \
              pasta                \
              astunparse_archive   \
              flatbuffers          \
              absl_py              \
              opt_einsum_archive   \
              jsoncpp_git          \
              pybind11

null  :=
space := $(null) #
comma := ,

# Comma separated list of system libraries
system_libs = $(subst $(space),$(comma),$(strip $(foreach l,$(SYSTEM_LIBS),$(l))))

# ---------------------------------------------------------------------------------------------------------------------
# Build settings
# ---------------------------------------------------------------------------------------------------------------------

export CUSTOM_BAZEL_FLAGS = \
		--repo_env=TF_SYSTEM_LIBS=$(system_libs) \
		$(foreach r,$(EXTERNAL_SOURCES),--override_repository=$(r)=$(CURDIR)/local/$(r))

# Produce optimized code
COMPILATION_MODE = opt

# Pass pycoral build flags to make
MAKEFLAGS += COMPILATION_MODE=$(COMPILATION_MODE)

# ---------------------------------------------------------------------------------------------------------------------
# Optimizations & Crossbuild
# ---------------------------------------------------------------------------------------------------------------------

# TODO: set platform specific optimization flags (like FPU, etc...)
ifeq ($(DEB_HOST_ARCH),amd64)
	export CC_OPT_FLAGS = -Wno-sign-compare -mavx -mavx2 -mfma -msse4.2
	CPU = k8
else ifeq ($(DEB_HOST_ARCH),armhf)
	CUSTOM_BAZEL_FLAGS += --crosstool_top=@system_config_arm_compiler//:toolchain
	CPU = armv7a
else ifeq ($(DEB_HOST_ARCH),arm64)
	CUSTOM_BAZEL_FLAGS += --crosstool_top=@system_config_arm_compiler//:toolchain
	CPU = aarch64
endif

MAKEFLAGS += CPU=$(CPU)

# ---------------------------------------------------------------------------------------------------------------------
# Miscellaneous
# ---------------------------------------------------------------------------------------------------------------------

# Make bazel place its cache and build artifacts in ".."
export HOME = $(patsubst %/,%,$(dir $(CURDIR)))

# Some of the scripts assume python == python3 (despite the above
# settings), hence prepend PATH with a directory where we will place
# a python symlink pointing to Python3
export PATH := $(CURDIR)/.env/bin:$(PATH)

# Use bash as our SHELL
export SHELL:=/bin/bash
export SHELLOPTS:=$(if $(SHELLOPTS),$(SHELLOPTS):)pipefail:errexit

# Let GNU make run all commands in a single shell
.ONESHELL:

# remove files generated by the build
clean_cmds = $(clean_bazel_env) && rm -rf bazel-* out debian/tmp

# use invalid proxies to make sure we do not need to fetch anything
set_invalid_proxies =                           \
	export ftp_proxy=http://127.0.0.1:1;	\
	export http_proxy=http://127.0.0.1:1;	\
	export https_proxy=http://127.0.0.1:1;

prepare_bazel_env =   \
	mkdir -p .env/bin; \
	ln -sf /usr/bin/python3 .env/bin/python; \
	ln -sf $(CURDIR)/debian/bazel-batch.sh .env/bin/bazel;

clean_bazel_env = rm -rf .env

# common shell options for build commands
set_shell_opts = set -x

# ---------------------------------------------------------------------------------------------------------------------
# Rules
# ---------------------------------------------------------------------------------------------------------------------

# Catch all
%:
	dh $@ --with python3 --buildsystem=pybuild

# build using bazel
override_dh_auto_build:
	$(prepare_bazel_env)
	$(set_invalid_proxies)
	$(set_shell_opts)
	:
	# build native code
	$(MAKE) pybind
	:
	# build python packages
	dh_auto_build

override_dh_auto_test:
	# no build-time tests
	:

override_dh_auto_clean:
	dh_auto_clean
	$(clean_cmds)

# ---------------------------------------------------------------------------------------------------------------------
# External sources
# ---------------------------------------------------------------------------------------------------------------------

# this rule is only used when the source tarball does not include local copies of the external
# projects we depend on
.PHONY: local
local:
	$(prepare_bazel_env)
	$(set_shell_opts)
	:
	bazel sync									\
		--experimental_repo_remote_exec						\
		$(foreach r,$(EXTERNAL_SOURCES),--only=$(r))
	mkdir -p $(@)
	$(foreach r,$(EXTERNAL_SOURCES),						\
		echo "# importing $(r) from bazel cache to $(@)/..." &&			\
		mv $(HOME)/.cache/bazel/_bazel_$(USER)/*/external/$(r) $(@)/ && )		\
	symlinks -cr .
	$(clean_bazel_env)
